@Html.DevExpress().GridView(settings =>
{
    settings.Name = "grid_Impresora";
    settings.CallbackRouteValues = new { Controller = (string)ViewBag.NameController, Action = "GridViewImpresora" };
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;

    settings.SettingsSearchPanel.Visible = false;
    settings.SettingsBehavior.AllowFixedGroups = true;
    settings.SettingsBehavior.AllowDragDrop = true;
    settings.SettingsBehavior.AllowSort = true;
    //settings.SettingsBehavior.AllowFocusedRow = true;

    settings.SettingsCookies.StoreFiltering = true;
    settings.SettingsCookies.StoreGroupingAndSorting = true;
    settings.SettingsCookies.StorePaging = true;
    settings.SettingsCookies.Enabled = true;
    settings.SettingsBehavior.EnableCustomizationWindow = true;


    settings.CustomJSProperties = (s, e) =>
    {
        MVCxGridView gridView = (MVCxGridView)s;
        e.Properties["cpClientLayout" + (string)ViewBag.NameController] = gridView.SaveClientLayout();

        ASPxGridView gridJS = (ASPxGridView)s;
        e.Properties["cpGridSettings"] = gridJS.Settings;
        //e.Properties["cpGridColumns"] = gridJS.Columns;
        List<string> columnsNames = new List<string>();
        foreach (GridViewDataColumn item in gridJS.DataColumns)
        {
            columnsNames.Add(item.FieldName);
        }
        e.Properties["cpGridColumns"] = columnsNames;
    };

    settings.CommandColumn.Visible = false;
    settings.Settings.UseFixedTableLayout = true;


    settings.CommandColumn.ShowClearFilterButton = false;
    //CheckBox en cada fila y checkbox general
    settings.CommandColumn.ShowSelectCheckbox = false;
    settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
    settings.CommandColumn.HeaderStyle.BackColor = System.Drawing.Color.Orange;

    settings.SettingsBehavior.AllowSelectByRowClick = true;
    settings.SettingsBehavior.AllowSelectSingleRowOnly = true;

    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;

    settings.Settings.ShowGroupPanel = true;

    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;
    settings.SettingsPager.FirstPageButton.Visible = false;
    settings.SettingsPager.LastPageButton.Visible = false;
    settings.SettingsPager.PageSizeItemSettings.Visible = false;
    //settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.KeyFieldName = "ID";

    settings.Columns.Add(column =>
    {
        column.FieldName = "ID";

        column.Caption = "#Id";
        column.SetColVisible(false);
        column.HeaderStyle.BackColor = System.Drawing.Color.LightGray;
        column.HeaderStyle.Font.Bold = true;
    });

    CRM.Website.DevExpressHelpers.GridHelper.AddColumnsSettingViewData(settings.Columns, Model.GetDynamicCollectionList(Model.Datos));

    //Fila de filtros
    settings.Settings.ShowFilterRow = false;
    //Icono del menu del filtrado
    settings.Settings.ShowFilterRowMenu = false;

    //Setear por defecto la condicion de filtrado
    //de todas las columnas a Contains
    settings.DataBound = (sender, e) =>
    {
        MVCxGridView gv = sender as MVCxGridView;
        gv.Visible = (gv.VisibleRowCount > 0);

        foreach (GridViewColumn column in gv.Columns)
        {
            var dataColumn = column as GridViewDataColumn;
            if (dataColumn != null)
                dataColumn.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        }
    };


    settings.PreRender = (s, e) =>
    {
        MVCxGridView grid = s as MVCxGridView;

        if (grid != null)
            grid.ExpandAll();
    };

    settings.SettingsDetail.ExportMode = GridViewDetailExportMode.Expanded;

}).Bind(Model.Datos).GetHtml()
