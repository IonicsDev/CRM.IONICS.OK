@Html.DevExpress().GridView(settings =>
{
    settings.Name = "grid_" + ViewBag.NameController;
    settings.CallbackRouteValues = new { Controller = (string)ViewBag.NameController, Action = "GridViewAllPartial" };

    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Height = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.ClientSideEvents.Init = "OnInit";
    settings.ClientSideEvents.EndCallback = "OnEndCallback";
    settings.ClientSideEvents.BeginCallback = "onBeginCallback";
    settings.SettingsSearchPanel.Visible = true;
    settings.SettingsBehavior.AllowFixedGroups = true;
    settings.SettingsBehavior.AllowDragDrop = true;
    settings.SettingsBehavior.AllowSort = true;

    settings.ControlStyle.Paddings.Padding = System.Web.UI.WebControls.Unit.Pixel(0);
    settings.ControlStyle.Border.BorderWidth = System.Web.UI.WebControls.Unit.Pixel(0);
    settings.ControlStyle.BorderBottom.BorderWidth = System.Web.UI.WebControls.Unit.Pixel(1);
    settings.SettingsCookies.StoreFiltering = true;
    settings.SettingsCookies.StoreGroupingAndSorting = true;
    settings.SettingsCookies.StorePaging = true;
    settings.SettingsCookies.Enabled = true;
    settings.SettingsBehavior.EnableCustomizationWindow = true;

    settings.SettingsExport.EnableClientSideExportAPI = true;
    settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.DataAware;
    settings.SettingsExport.PaperKind = System.Drawing.Printing.PaperKind.A4;
    settings.SettingsExport.Landscape = true;


    settings.Toolbars.Add(t =>
    {
        t.EnableAdaptivity = true;
        t.Items.Add(GridViewToolbarCommand.ExportToPdf);
        t.Items.Add(GridViewToolbarCommand.ExportToXls);
        t.Items.Add(GridViewToolbarCommand.ExportToXlsx);
        t.Items.Add(GridViewToolbarCommand.ExportToDocx);
        t.Items.Add(GridViewToolbarCommand.ExportToRtf);
        t.Items.Add(GridViewToolbarCommand.ExportToCsv);
    });

    settings.CustomJSProperties = (s, e) =>
    {
        MVCxGridView gridView = (MVCxGridView)s;
        e.Properties["cpClientLayout" + (string)ViewBag.NameController] = gridView.SaveClientLayout();

        ASPxGridView gridJS = (ASPxGridView)s;
        e.Properties["cpGridSettings"] = gridJS.Settings;
        //e.Properties["cpGridColumns"] = gridJS.Columns;
        List<string> columnsNames = new List<string>();
        foreach (GridViewDataColumn item in gridJS.DataColumns)
        {
            columnsNames.Add(item.FieldName);
        }
        e.Properties["cpGridColumns"] = columnsNames;
    };

    settings.CommandColumn.Visible = true;
    settings.Settings.UseFixedTableLayout = true;


    settings.CommandColumn.ShowClearFilterButton = true;
    //CheckBox en cada fila y checkbox general
    settings.CommandColumn.ShowSelectCheckbox = true;
    settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
    settings.CommandColumn.HeaderStyle.BackColor = System.Drawing.Color.Orange;

    //settings.SettingsBehavior.AllowSelectByRowClick = true;
    settings.ClientSideEvents.RowClick = "OnRowClick";
    settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;

    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
    settings.Settings.VerticalScrollableHeight = 500;


    settings.Settings.ShowGroupPanel = true;

    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.KeyFieldName = "Id";


    settings.Columns.Add(column =>
    {
        column.FieldName = "Id";

        column.Caption = "#Id";
        column.HeaderStyle.BackColor = System.Drawing.Color.LightGray;
        column.HeaderStyle.Font.Bold = true;

    });

    CRM.Website.DevExpressHelpers.GridHelper.AddColumnsSetting(settings.Columns, (Model).GetType());

    settings.Columns.Add(column =>
    {
        column.Caption = "Acciones";
        column.HeaderStyle.BackColor = System.Drawing.Color.Orange;
        column.HeaderStyle.Font.Bold = true;

        column.SetDataItemTemplateContent(c =>
        {
            if (((CRM.Website.Models.CustomPrincipal)User).IsInRole("EDIT", ViewBag.NameController))
            {
                ViewContext.Writer.Write(Html.ActionLink(" ", "View", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = "i-eye", title = "Ver" }) + "&nbsp;|&nbsp;" +
                    Html.ActionLink(" ", "Edit", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = "i-pencil-5", title = "Editar" }) + "&nbsp;|&nbsp;" +
                    Html.ActionLink(" ", "Delete", (string)ViewBag.NameControlle, new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { Class = "confirm i-close-4", title = "Baja" })
                );
            }
            else
            {
                ViewContext.Writer.Write(Html.ActionLink(" ", "View", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = " i-eye ", title = "Ver" }));
            }
        });

        column.Settings.AllowDragDrop = DefaultBoolean.True;
        column.Settings.AllowSort = DefaultBoolean.True;

    });


    //settings.Columns.Add(column =>
    //{
    //    column.FieldName = "Acciones";
    //    column.Caption = "Acciones";
    //    column.HeaderStyle.BackColor = System.Drawing.Color.Orange;
    //    column.HeaderStyle.Font.Bold = true;
    //    column.SetDataItemTemplateContent(c =>
    //    {
    //        if (DataBinder.Eval(c.DataItem, "Estado").ToString() == true.ToString())
    //        {
    //            ViewContext.Writer.Write(
    //            Html.ActionLink(" ", "View", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = " i-eye ", title = "Ver" }) + "&nbsp;|&nbsp;" +
    //            Html.ActionLink(" ", "Edit", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = " i-pencil-5 ", title = "Editar" }) + "&nbsp;|&nbsp;" +
    ////            Html.ActionLink(" ", "Delete", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
    //                new { Class = "confirm i-close-4", title = "Baja" })
    //            );
    //        }
    //        else
    //        {
    //            ViewContext.Writer.Write(
    //            Html.ActionLink(" ", "View", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = " i-eye ", title = "Ver" }) + "&nbsp;|&nbsp;" +
    //            Html.ActionLink(" ", "Edit", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = " i-pencil-5 ", title = "Editar" }) + "&nbsp;|&nbsp;" +
    //            Html.ActionLink(" ", "Delete", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = "confirm  i-loop ", title = "Restablecer" })
    //            );
    //        }
    //    });
    // });

    //Fila de filtros
    settings.Settings.ShowFilterRow = true;
    //Icono del menu del filtrado
    settings.Settings.ShowFilterRowMenu = false;


    //Setear por defecto la condicion de filtrado
    //de todas las columnas a Contains
    settings.DataBound = (sender, e) =>
    {
        MVCxGridView gv = sender as MVCxGridView;
        gv.Visible = (gv.VisibleRowCount > 0);

        foreach (GridViewColumn column in gv.Columns)
        {
            var dataColumn = column as GridViewDataColumn;
            if (dataColumn != null)
                dataColumn.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        }
    };


    settings.PreRender = (s, e) =>
    {
        MVCxGridView grid = s as MVCxGridView;

        if (grid != null)
            grid.ExpandAll();
    };

    settings.SettingsExport.RenderBrick = (sender, e) =>
    {
        if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
            e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
    };

    if (ViewData["exportRowType"] != null)
        settings.SettingsExport.ExportSelectedRowsOnly =
        ViewData["exportRowType"] as GridViewExportedRowType? == GridViewExportedRowType.Selected;

    //DevExpress.Web.Demos.GridViewFeaturesHelper.SetupGlobalGridViewBehavior(settings);

    settings.SettingsDetail.ExportMode = GridViewDetailExportMode.Expanded;

}).Bind(Model).GetHtml()

