@Html.DevExpress().GridView(settings => {
    settings.Name = "grid_" + ViewBag.NameController;
    settings.CallbackRouteValues = new { Controller = (string)ViewBag.NameController, Action = "GridViewAllPartial" };
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Height = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.ClientSideEvents.Init = "OnInit";
    settings.ClientSideEvents.EndCallback = "OnEndCallback";
    settings.SettingsSearchPanel.Visible = true;
    settings.SettingsBehavior.AllowFixedGroups = true;
    settings.SettingsBehavior.AllowDragDrop = true;
    settings.SettingsBehavior.AllowSort = true;

    settings.SettingsCookies.StoreFiltering = true;
    settings.SettingsCookies.StoreGroupingAndSorting = true;
    settings.SettingsCookies.StorePaging = true;
    settings.SettingsCookies.Enabled = true;
    settings.SettingsBehavior.EnableCustomizationWindow = true;

    settings.CustomJSProperties = (s, e) =>
    {
        MVCxGridView gridView = (MVCxGridView)s;
        e.Properties["cpClientLayout" + (string)ViewBag.NameController] = gridView.SaveClientLayout();

        ASPxGridView gridJS = (ASPxGridView)s;
        e.Properties["cpGridSettings"] = gridJS.Settings;
        //e.Properties["cpGridColumns"] = gridJS.Columns;
        List<string> columnsNames = new List<string>();
        foreach (GridViewDataColumn item in gridJS.DataColumns)
        {
            columnsNames.Add(item.FieldName);
        }
        e.Properties["cpGridColumns"] = columnsNames;
    };

    settings.CommandColumn.Visible = false;
    settings.Settings.UseFixedTableLayout = true;


    settings.CommandColumn.ShowClearFilterButton = true;
    //CheckBox en cada fila y checkbox general
    settings.CommandColumn.ShowSelectCheckbox = true;
    settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
    settings.CommandColumn.HeaderStyle.BackColor = System.Drawing.Color.Orange;

    //settings.SettingsBehavior.AllowSelectByRowClick = true;
    //settings.ClientSideEvents.RowClick = "OnRowClick";
    settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;

    settings.Settings.ShowGroupPanel = true;

    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
    settings.Settings.VerticalScrollableHeight = 500;
    settings.SettingsPager.EnableAdaptivity = true;

    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.KeyFieldName = "Id";


    settings.Columns.Add(column =>
    {
        column.FieldName = "Id";

        column.Caption = "#Id";
        column.HeaderStyle.BackColor = System.Drawing.Color.LightGray;
        column.HeaderStyle.Font.Bold = true;

    });

    CRM.Website.DevExpressHelpers.GridHelper.AddColumnsSetting(settings.Columns, (Model).GetType());

    settings.Columns.Add(column =>
    {
        column.Caption = "Acciones";
        column.HeaderStyle.BackColor = System.Drawing.Color.Orange;
        column.HeaderStyle.Font.Bold = true;

        column.SetDataItemTemplateContent(c =>
        {
            if (((CRM.Website.Models.CustomPrincipal)User).IsInRole("EDIT", ViewBag.NameController))
            {
                bool IsIndex = false;
                if (!ViewContext.RouteData.Values["action"].ToString().ToUpper().Trim().Equals("ENVIADOS"))
                    IsIndex = true;

                ViewContext.Writer.Write(Html.ActionLink(" ", "View", (string)ViewBag.NameController,
                    new { Id = DataBinder.Eval(c.DataItem, "Id"), ac =  (bool)IsIndex},
                    new { @class = " i-eye ", title = "Ver" })
                );
            }
            else
            {
                //ViewContext.Writer.Write(Html.ActionLink(" ", "View", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = " i-eye ", title = "Ver" }));
                ViewContext.Writer.Write(Html.ActionLink(" ", "View", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id"), ac = true },new { @class = " i-eye ", title = "Ver" }));
            }
        });

        column.Settings.AllowDragDrop = DefaultBoolean.True;
        column.Settings.AllowSort = DefaultBoolean.True;

    });

    //Fila de filtros
    settings.Settings.ShowFilterRow = true;
    //Icono del menu del filtrado
    settings.Settings.ShowFilterRowMenu = false;

    settings.HtmlRowPrepared = (sender, e) =>
    {
        if (e.RowType != GridViewRowType.Data) return;

        if (!ViewContext.RouteData.Values["action"].ToString().ToUpper().Trim().Equals("ENVIADOS"))
        {
            List<CRM.Business.Entities.Mail> mailsNoLeidos = (List<CRM.Business.Entities.Mail>)ViewBag.MensajesNoLeidos;
            if (mailsNoLeidos != null && mailsNoLeidos.Count > 0)
            {
                int idRow = Convert.ToInt32(e.GetValue("Id"));
                foreach (var mailNoLeido in mailsNoLeidos)
                {
                    if (mailNoLeido.Id == idRow)
                    {
                        e.Row.BackColor = System.Drawing.ColorTranslator.FromHtml("#89c2fd");
                    }
                }
            }
        }
    };

    //Setear por defecto la condicion de filtrado
    //de todas las columnas a Contains
    settings.DataBound = (sender, e) =>
    {
        MVCxGridView gv = sender as MVCxGridView;
        gv.Visible = (gv.VisibleRowCount > 0);

        foreach (GridViewColumn column in gv.Columns)
        {
            var dataColumn = column as GridViewDataColumn;
            if (dataColumn != null)
                dataColumn.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        }
    };

    settings.PreRender = (s, e) => {
        MVCxGridView grid = s as MVCxGridView;

        if(grid != null)
            grid.ExpandAll();
    };

    settings.SettingsDetail.ExportMode = GridViewDetailExportMode.Expanded;

}).Bind(Model).GetHtml()