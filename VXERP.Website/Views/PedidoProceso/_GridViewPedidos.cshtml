@Html.DevExpress().GridView(settings =>
{
    settings.Name = "grid_" + ViewBag.NameController;
    settings.CallbackRouteValues = new { Controller = (string)ViewBag.NameController, Action = "GridViewPedidos" };

    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.SettingsSearchPanel.Visible = true;
    settings.SettingsBehavior.AllowFixedGroups = true;
    settings.SettingsBehavior.AllowDragDrop = true;
    settings.SettingsBehavior.AllowSort = true;

    settings.SettingsCookies.StoreFiltering = true;
    settings.SettingsCookies.StoreGroupingAndSorting = true;
    settings.SettingsCookies.StorePaging = true;
    settings.SettingsCookies.Enabled = true;
    settings.SettingsBehavior.EnableCustomizationWindow = true;

    settings.CustomJSProperties = (s, e) =>
    {
        MVCxGridView gridView = (MVCxGridView)s;
        e.Properties["cpClientLayout" + (string)ViewBag.NameController] = gridView.SaveClientLayout();


        ASPxGridView gridJS = (ASPxGridView)s;
        e.Properties["cpGridSettings"] = gridJS.Settings;
        //e.Properties["cpGridColumns"] = gridJS.Columns;
        List<string> columnsNames = new List<string>();
        foreach (GridViewDataColumn item in gridJS.DataColumns)
        {
            columnsNames.Add(item.FieldName);
        }
        e.Properties["cpGridColumns"] = columnsNames;
    };

    //settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
    //settings.CommandColumn.HeaderStyle.BackColor = System.Drawing.Color.Orange;


    //settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;
    settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;
    settings.Settings.ShowGroupPanel = true;

    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
    settings.Settings.VerticalScrollableHeight = 500;

    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.SettingsPager.EnableAdaptivity = true;


    settings.KeyFieldName = "ID";
    settings.KeyFieldName = "CodigoIonics";

    settings.Columns.Add(column =>
    {
        column.Caption = "Acciones";
        column.HeaderStyle.BackColor = System.Drawing.Color.Orange;
        column.HeaderStyle.Font.Bold = true;

        column.SetDataItemTemplateContent(c =>
        {
            decimal cantidadEntregada = Convert.ToDecimal(DataBinder.Eval(c.DataItem, "CantidadEntregada"));
            decimal cantidadFacturada = Convert.ToDecimal(DataBinder.Eval(c.DataItem, "CantidadFacturada"));


            if (((CRM.Website.Models.CustomPrincipal)User).IsInRole("EDIT", ViewBag.NameController))
            {
                if (cantidadEntregada > 0)
                {
                    if (cantidadFacturada > 0)
                    {
                        ViewContext.Writer.Write(
                            Html.ActionLink(" ", "Imprimir", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = "i-print-2 Impresora modal-link", title = "Imprimir" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "Edit", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-pencil-5 ", title = "Ver o Editar" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "DetalleEntrega", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-cube4 DetallePedido modal-link", title = "Detalle de la Entrega" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "DetalleFactura", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-coin DetalleFactura modal-link", title = "Detalle de Factura" }) + "&nbsp;"
                        );
                    }
                    else
                    {
                        ViewContext.Writer.Write(
                            Html.ActionLink(" ", "Imprimir", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-print-2 Impresora modal-link", title = "Imprimir" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "Edit", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-pencil-5 ", title = "Ver o Editar" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "DetalleEntrega", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-cube4 DetallePedido modal-link", title = "Detalle de la Entrega" })
                        );
                    }
                }
                else
                {
                    if (cantidadFacturada > 0)
                    {
                        ViewContext.Writer.Write(
                            Html.ActionLink(" ", "Imprimir", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-print-2 Impresora modal-link", title = "Imprimir" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "Edit", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-pencil-5 ", title = "Ver o Editar" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "DetalleFactura", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-coin DetalleFactura modal-link", title = "Detalle de Factura" })
                        );
                    }
                    else
                    {
                        ViewContext.Writer.Write(
                            Html.ActionLink(" ", "Imprimir", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-print-2 Impresora modal-link", title = "Imprimir" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "Edit", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-pencil-5 ", title = "Ver o Editar" })
                        );
                    }
                }
            }
            else
            {
                if (cantidadEntregada > 0)
                {
                    if (cantidadFacturada > 0)
                    {
                        ViewContext.Writer.Write(
                            Html.ActionLink(" ", "Imprimir", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-print-2 Impresora modal-link", title = "Imprimir" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "View", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-eye ", title = "Ver" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "DetalleEntrega", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-cube4 DetallePedido modal-link", title = "Detalle de la Entrega" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "DetalleFactura", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-coin DetalleFactura modal-link", title = "Detalle de Factura" })
                        );
                    }
                    else
                    {
                        ViewContext.Writer.Write(
                            Html.ActionLink(" ", "Imprimir", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-print-2 Impresora modal-link", title = "Imprimir" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "View", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-eye ", title = "Ver" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "DetalleEntrega", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-cube4 DetallePedido modal-link", title = "Detalle de la Entrega" })  // i-loop, i-loop-5, 3, 4, i-cube4,
                        );
                    }
                }
                else
                {
                    if (cantidadFacturada > 0)
                    {
                        ViewContext.Writer.Write(
                            Html.ActionLink(" ", "Imprimir", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-print-2 Impresora modal-link", title = "Imprimir" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "View", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-eye ", title = "Ver" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "DetalleFactura", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-coin DetalleFactura modal-link", title = "Detalle de Factura" })
                        );
                    }
                    else
                    {
                        ViewContext.Writer.Write(
                            Html.ActionLink(" ", "Imprimir", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-print-2 Impresora modal-link", title = "Imprimir" }) + "&nbsp;|&nbsp;" +
                            Html.ActionLink(" ", "View", (string)ViewBag.NameController, new { Id = DataBinder.Eval(c.DataItem, "Id") },
                            new { @class = " i-eye ", title = "Ver" })
                        );
                    }
                }
            }
        });
        column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
        column.Settings.AllowDragDrop = DefaultBoolean.True;
        column.Settings.AllowSort = DefaultBoolean.True;
        column.MinWidth = 135;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "ID";

        column.Caption = "#Pedido";
        column.HeaderStyle.BackColor = System.Drawing.Color.LightGray;
        column.HeaderStyle.Font.Bold = true;
        column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "DescEstado";

        column.Caption = "Descripcion Estado";
        column.HeaderStyle.BackColor = System.Drawing.Color.LightGray;
        column.HeaderStyle.Font.Bold = true;
        column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


        CRM.Business.Views.vEstadosPedidos Estado = new CRM.Business.Views.vEstadosPedidos();


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
        comboBoxProperties.DataSource = Estado.GetAll();
        comboBoxProperties.TextField = "Descripcion";
        comboBoxProperties.ValueField = "Descripcion";
        comboBoxProperties.ValueType = typeof(string);
        comboBoxProperties.DropDownStyle = DropDownStyle.DropDownList;
    });



    //settings.Columns.Add(column =>
    //{
    //    column.FieldName = "FechaAutorizadaRecepcion";
    //    column.SetDataItemTemplateContent(c =>
    //    {
    //        Html.DevExpress().DateEdit(txtSettings =>
    //        {
    //            txtSettings.Name = "txt" + c.KeyValue + c.v;
    //            txtSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

    //            txtSettings.Properties.ClientSideEvents.ValueChanged = String.Format("function (s, e) {{ OnValueChanged(s, '{0}', {1}, '{2}'); }}",
    //                c.Column.FieldName, c.KeyValue, Url.Action("UpdateValue", "PedidoProcesoController", null));
    //        }).Bind(DataBinder.Eval(c.DataItem, c.Column.FieldName)).Render();
    //    });
    //});


    CRM.Website.DevExpressHelpers.GridHelper.AddCustomColumnsSettingViewData(settings.Columns, Model.GetDynamicCollectionList(Model.GetEmpyViewModel()), Html, (bool)ViewBag.IsAdminOperador);

    int index = 0;

    settings.HtmlRowPrepared = (sender, e) =>
    {
        if (e.RowType != GridViewRowType.Data) return;

        List<CRM.Business.Entities.ColorEstado> coloresEstado = (List<CRM.Business.Entities.ColorEstado>)ViewBag.ColoresEstado;
        if (index == coloresEstado.Count)
            index = 0;

        string color = Convert.ToString(e.GetValue("HexaColor"));
        //string color = Convert.ToString(coloresEstado[index].HexaColor);
        //e.Row.BackColor = System.Drawing.ColorTranslator.FromHtml(color);
        e.Row.ForeColor = System.Drawing.ColorTranslator.FromHtml(color);
        index++;
    };

    settings.DataBound = (sender, e) =>
    {
        MVCxGridView gv = sender as MVCxGridView;
        gv.Visible = (gv.VisibleRowCount > 0);

        foreach (GridViewColumn column in gv.Columns)
        {
            var dataColumn = column as GridViewDataColumn;
            if (dataColumn != null)
                dataColumn.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        }
    };

    settings.PreRender = (s, e) =>
    {
        MVCxGridView grid = s as MVCxGridView;

        if (grid != null)
            grid.ExpandAll();
    };


    settings.SettingsBehavior.AllowSelectByRowClick = true;
    settings.SettingsBehavior.AllowSelectSingleRowOnly = true;
    settings.SettingsDetail.ExportMode = GridViewDetailExportMode.Expanded;
    settings.Settings.UseFixedTableLayout = true;
    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = false;
    /*Para boton Filtrar en la primera columna.*/
    settings.CommandColumn.Visible = false;
    settings.CommandColumn.ShowClearFilterButton = false;


}).Bind(Model.Datos).GetHtml()